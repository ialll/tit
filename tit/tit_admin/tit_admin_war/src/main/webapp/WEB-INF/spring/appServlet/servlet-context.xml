<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:task="http://www.springframework.org/schema/task"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="
		http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/task http://www.springframework.org/schema/task/spring-task.xsd
		http://www.springframework.org/schema/context
        http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	  <annotation-driven conversion-service="conversionService" enable-matrix-variables="true">
		 <argument-resolvers>
			 <beans:bean class="org.tit_admin_common.demo.data.custom.CustomArgumentResolver"/>
		</argument-resolvers>
		 <async-support default-timeout="3000">
			<callable-interceptors>
				<beans:bean class="org.tit_admin_common.demo.async.TimeoutCallableProcessingInterceptor" />
			</callable-interceptors>
		</async-support>  
	</annotation-driven>   
	
 	<beans:bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping"/>
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources/ directory -->
	<resources mapping="/resources/**" location="/resources/" />
	<!-- 多视图解析器配置 -->
	<!--jsp jstl视图解析器 Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
 	<beans:bean id="jspViewResolver" class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
		<beans:property name="order" value="3" />
	</beans:bean> 
	<!-- tiles视图解析器配置 -->
    <beans:bean id="tilesViewResolver"
          class="org.springframework.web.servlet.view.UrlBasedViewResolver">
        <beans:property name="viewClass" value="org.springframework.web.servlet.view.tiles2.TilesView"/>
        <beans:property name="order" value="0" />
    </beans:bean>
    <!-- velocity视图解析器 -->
	<!-- <beans:bean id="velocityViewResolver" class="org.springframework.web.servlet.view.velocity.VelocityViewResolver">
 		 <beans:property name="cache" value="false"/>
 		 <beans:property name="exposeSessionAttributes" value="true"/>
 		<beans:property name="contentType" value="text/html;charset=UTF-8" />
  		<beans:property name="prefix" value="/"/>
  		<beans:property name="suffix" value=".vm"/>
  		<beans:property name="order" value="1"/>
	</beans:bean>-->
	<beans:bean id="velocityConfig" class="org.springframework.web.servlet.view.velocity.VelocityConfigurer">
		<beans:property name="velocityProperties">
			<beans:props>
				<beans:prop key="input.encoding">UTF-8</beans:prop>
				<beans:prop key="output.encoding">UTF-8</beans:prop>
				<beans:prop key="contentType">text/html;charset=UTF-8</beans:prop> 
			</beans:props>
		</beans:property>
	</beans:bean> 
	<!-- Only needed because we install custom converters to support the examples in the org.springframewok.samples.mvc.convert package -->
	 <beans:bean id="conversionService" class="org.springframework.format.support.FormattingConversionServiceFactoryBean">
		<beans:property name="formatters">
            <beans:bean class="org.tit_admin_common.demo.convert.MaskFormatAnnotationFormatterFactory" />
		</beans:property>
	</beans:bean>  
	 <beans:bean class="org.springframework.web.servlet.view.ResourceBundleViewResolver">
		<beans:property name="basename" value="velocity" />
		<beans:property name="order" value="2" />
	</beans:bean>	 
    <beans:bean id="tilesConfigurer"
          class="org.springframework.web.servlet.view.tiles2.TilesConfigurer">
        <beans:property name="definitions">
            <beans:list>
                <beans:value>classpath:tiles/templates.web.xml</beans:value>
            </beans:list>
        </beans:property>
    </beans:bean>
	    <beans:bean class="org.springframework.web.servlet.view.ContentNegotiatingViewResolver">
        <beans:property name="order" value="1"/>
        <beans:property name="mediaTypes">
            <beans:map>
                <beans:entry key="xml" value="application/xml"/>
                <beans:entry key="json" value="application/json"/>
            </beans:map>
        </beans:property>
        <beans:property name="defaultViews">
            <beans:list>
                <!-- Json View -->
                <beans:bean class="org.springframework.web.servlet.view.json.MappingJackson2JsonView">
                    <beans:property name="modelKey" value="response"/>
                </beans:bean>

                <!-- XStream XML View -->
                <beans:bean class="org.springframework.web.servlet.view.xml.MarshallingView">
                    <beans:property name="modelKey" value="response"/>
                    <beans:constructor-arg>
                        <beans:bean id="jaxb2Marshaller" class="org.springframework.oxm.xstream.XStreamMarshaller">
                            <beans:property name="autodetectAnnotations" value="true"/>
                        </beans:bean>
                    </beans:constructor-arg>
                </beans:bean>
            </beans:list>
        </beans:property>
        <beans:property name="defaultContentType" value="application/xml"/>
        <beans:property name="favorPathExtension" value="true"/>
    </beans:bean>
	<!-- Only needed because we require fileupload in the org.springframework.samples.mvc.fileupload package -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver" />

	<!-- Imports user-defined @Controller beans that process client requests -->
	
	<beans:import resource="applicationContext-properties.xml" />
	<beans:import resource="applicationContext-springJDBC.xml" />
	<beans:import resource="applicationContext-mybatis.xml" />
	<beans:import resource="controllers.xml" />
	<beans:import resource="services.xml" />
	<beans:import resource="daos.xml" />
	<task:annotation-driven />
	
</beans:beans>